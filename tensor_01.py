# -*- coding: utf-8 -*-
"""tensor_01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13QhBsYqLIlvLzvRjjoC9GTkqxdJbyzBN
"""

import tensorflow as tf

input_value = tf.constant(1.0)

graph = tf.get_default_graph()

graph.get_operations()[0].node_def

input_value

session1 = tf.Session()
session1.run(input_value)

weight = tf.Variable(0.8)

graph.get_operations()

output_value = weight * input_value
graph.get_operations()

session1.run(tf.initialize_all_variables())
session1.run(output_value)

x = tf.constant(1.5, name='input')
w = tf.Variable(0.8, name='weight')
y = tf.multiply(w, x)

y_ = tf.constant(0.32, name='target')
loss = (y-y_) ** 2

optim = tf.train.GradientDescentOptimizer(learning_rate=0.01)

grads_and_vars = optim.compute_gradients(loss)
session2 = tf.Session()
session2.run(tf.initialize_all_variables())
session2.run(grads_and_vars[0][1])

session2.run(optim.apply_gradients(grads_and_vars))
session2.run(w)
print(session2.run(w), session2.run(y))

train_step = tf.train.GradientDescentOptimizer(0.01).minimize(loss)
for i in range(100):
  session2.run(train_step)
session2.run(y)

mnist = tf.keras.datasets.mnist

(X_train, y_train), (X_test, y_test) = mnist.load_data()

print(X_train.shape, y_train.shape)

X_train = X_train / 255.0 * 0.99 + 0.01
X_test = X_test / 255.0 * 0.99 + 0.01

model = tf.keras.models.Sequential([
                                    tf.keras.layers.Flatten(input_shape=(28, 28)),
                                    tf.keras.layers.Dense(128, activation='relu'),
                                    tf.keras.layers.Dropout(0.2),
                                    tf.keras.layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam',
              loss = 'sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(X_train, y_train, epochs=7)
model.evaluate(X_test, y_test, verbose=2)

import matplotlib.pyplot as plt

n = 8
fig, axs = plt.subplots(n, n, figsize=(16, 16))
for i in range(n):
  for j in range(n):
    arr = X_train[n*i + j]
    axs[i, j].imshow(arr, cmap='Greys')
    axs[i, j].set_title(y_train[n*i+j], c='green')

import imageio

img_arr = imageio.imread('6.png', as_gray=True)
#print(img_arr)
plt.imshow(img_arr);

img_arr_ = (255-img_arr) / 255 * 0.99 + 0.01
plt.imshow(img_arr_, cmap='Greys');

result = model.predict(img_arr_.reshape(1, 28, 28)).flatten()
print(result)

import numpy as np
plt.bar(x=np.arange(10), height=result);